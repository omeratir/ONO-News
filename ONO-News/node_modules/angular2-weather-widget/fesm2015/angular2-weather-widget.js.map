{"version":3,"file":"angular2-weather-widget.js.map","sources":["ng://angular2-weather-widget/lib/config.ts","ng://angular2-weather-widget/lib/angular-weather-widget.service.ts","ng://angular2-weather-widget/lib/angular-weather-widget.component.ts","ng://angular2-weather-widget/lib/angular-weather-widget.module.ts"],"sourcesContent":["export const API = 'http://api.apixu.com/v1/current.json?key=';","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularWeatherWidgetService {\n\n  constructor(public http: HttpClient) { }\n\n  getWeatherDetails(location, APIKEY) : Observable <any> {\n   return this.http.get(API + APIKEY + '&q=' + location);\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\n\n@Component({\n  selector: 'angular-weather-widget',\n  templateUrl: 'angular-weather-widget.component.html',\n  styleUrls: ['angular-weather-widget.component.scss']\n})\nexport class AngularWeatherWidgetComponent implements OnInit {\n  @Input() APIKEY: any;\n  @Input() height: string = 'auto';\n  @Input() width: string = '280px';\n  @Input() backgroundColor: string = '#2a2828';\n  @Input() isBoxShadow: boolean = true;\n  @Input() borderRadius: string = '5px';\n  @Input() locationFontSize: string = '40px';\n  @Input() locationFontColor: string = '#fff';\n  @Input() status: boolean = true;\n  @Input() statusFontColor: string = '#fff';\n  @Input() statusFontSize: String = '18px';\n  @Input() temperature: Boolean = true;\n  @Input() isDegree: boolean = true;\n  @Input() isFahrenheit: boolean = false;\n  @Input() tempratureFontColor: string = '#fff';\n  @Input() tempratureFontSize: string = '80px';\n  @Input() weatherImages: boolean = true;\n  @Input() weatherImageWidth: string = '100px';\n  @Input() weatherImageHeight: string = '100px';\n  @Input() geoLocation: boolean = true;\n  @Input() location: any = '';\n  @Input() isWind: boolean = true;\n  @Input() windFontColor: string = '#fff';\n  @Input() windFontSize: string = '20px';\n  @Input() isWindKPH: boolean = true;\n  @Input() isWindMPH: boolean = false;\n\n  weatherDetails;\n  locationDetails;\n  constructor(public ws: AngularWeatherWidgetService) { }\n\n  ngOnInit() {\n    this.checkLocation();\n  }\n\n  checkLocation() {\n    // if enabled geolocation\n    if (this.geoLocation) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          var lat = position.coords.latitude;\n          var long = position.coords.longitude;\n          this.location = lat + ',' + long;\n          this.getWeather();\n        });\n      } else {\n        console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');\n      }\n    } else if (!this.geoLocation && this.location.length < 1) {\n      console.log('Provide  a valid location');\n    } else {\n      this.getWeather();\n    }\n  }\n\n  getWeather() {\n    if (this.APIKEY) {\n      this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe(response => {\n        this.weatherDetails = response.current;\n        this.locationDetails = response.location;\n      }, err => {\n        console.log(err.error.error.message);\n      })\n    } else {\n      console.log('Invalid APIKEY');\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularWeatherWidgetComponent } from './angular-weather-widget.component';\nimport { CommonModule } from '@angular/common';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AngularWeatherWidgetComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [AngularWeatherWidgetComponent],\n  providers: [AngularWeatherWidgetService]\n})\nexport class AngularWeatherWidgetModule { }\n"],"names":[],"mappings":";;;;;;;;;AAAA,MAAa,GAAG,GAAG,2CAA2C;;;;;;ACA9D,MAQa,2BAA2B;;;;IAEtC,YAAmB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KAAK;;;;;;IAExC,iBAAiB,CAAC,QAAQ,EAAE,MAAM;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC;KACtD;;;YATF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;YALQ,UAAU;;;;;;;;ACFnB,MAQa,6BAA6B;;;;IA8BxC,YAAmB,EAA+B;QAA/B,OAAE,GAAF,EAAE,CAA6B;QA5BzC,WAAM,GAAW,MAAM,CAAC;QACxB,UAAK,GAAW,OAAO,CAAC;QACxB,oBAAe,GAAW,SAAS,CAAC;QACpC,gBAAW,GAAY,IAAI,CAAC;QAC5B,iBAAY,GAAW,KAAK,CAAC;QAC7B,qBAAgB,GAAW,MAAM,CAAC;QAClC,sBAAiB,GAAW,MAAM,CAAC;QACnC,WAAM,GAAY,IAAI,CAAC;QACvB,oBAAe,GAAW,MAAM,CAAC;QACjC,mBAAc,GAAW,MAAM,CAAC;QAChC,gBAAW,GAAY,IAAI,CAAC;QAC5B,aAAQ,GAAY,IAAI,CAAC;QACzB,iBAAY,GAAY,KAAK,CAAC;QAC9B,wBAAmB,GAAW,MAAM,CAAC;QACrC,uBAAkB,GAAW,MAAM,CAAC;QACpC,kBAAa,GAAY,IAAI,CAAC;QAC9B,sBAAiB,GAAW,OAAO,CAAC;QACpC,uBAAkB,GAAW,OAAO,CAAC;QACrC,gBAAW,GAAY,IAAI,CAAC;QAC5B,aAAQ,GAAQ,EAAE,CAAC;QACnB,WAAM,GAAY,IAAI,CAAC;QACvB,kBAAa,GAAW,MAAM,CAAC;QAC/B,iBAAY,GAAW,MAAM,CAAC;QAC9B,cAAS,GAAY,IAAI,CAAC;QAC1B,cAAS,GAAY,KAAK,CAAC;KAImB;;;;IAEvD,QAAQ;QACN,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;;;IAED,aAAa;;QAEX,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,SAAS,CAAC,WAAW,EAAE;gBACzB,SAAS,CAAC,WAAW,CAAC,kBAAkB;;;;gBAAC,CAAC,QAAQ;;wBAC5C,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ;;wBAC9B,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS;oBACpC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;oBACjC,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB,EAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,qIAAqI,CAAC,CAAC;aACpJ;SACF;aAAM,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACxD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;KACF;;;;IAED,UAAU;QACR,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS;;;;YAAC,QAAQ;gBACtE,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC;gBACvC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,QAAQ,CAAC;aAC1C;;;;YAAE,GAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACtC,EAAC,CAAA;SACH;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;SAC/B;KACF;;;YAxEF,SAAS,SAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,6mDAAoD;;aAErD;;;;YANQ,2BAA2B;;;qBAQjC,KAAK;qBACL,KAAK;oBACL,KAAK;8BACL,KAAK;0BACL,KAAK;2BACL,KAAK;+BACL,KAAK;gCACL,KAAK;qBACL,KAAK;8BACL,KAAK;6BACL,KAAK;0BACL,KAAK;uBACL,KAAK;2BACL,KAAK;kCACL,KAAK;iCACL,KAAK;4BACL,KAAK;gCACL,KAAK;iCACL,KAAK;0BACL,KAAK;uBACL,KAAK;qBACL,KAAK;4BACL,KAAK;2BACL,KAAK;wBACL,KAAK;wBACL,KAAK;;;;;;;AClCR,MAea,0BAA0B;;;YATtC,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,6BAA6B,CAAC;gBAC7C,OAAO,EAAE;oBACP,YAAY;oBACZ,gBAAgB;iBACjB;gBACD,OAAO,EAAE,CAAC,6BAA6B,CAAC;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;;"}
