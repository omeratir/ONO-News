import { Injectable, NgModule, Component, Input, defineInjectable, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var API = 'http://api.apixu.com/v1/current.json?key=';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularWeatherWidgetService = /** @class */ (function () {
    function AngularWeatherWidgetService(http) {
        this.http = http;
    }
    /**
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    AngularWeatherWidgetService.prototype.getWeatherDetails = /**
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    function (location, APIKEY) {
        return this.http.get(API + APIKEY + '&q=' + location);
    };
    AngularWeatherWidgetService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AngularWeatherWidgetService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(inject(HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
    return AngularWeatherWidgetService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularWeatherWidgetComponent = /** @class */ (function () {
    function AngularWeatherWidgetComponent(ws) {
        this.ws = ws;
        this.height = 'auto';
        this.width = '280px';
        this.backgroundColor = '#2a2828';
        this.isBoxShadow = true;
        this.borderRadius = '5px';
        this.locationFontSize = '40px';
        this.locationFontColor = '#fff';
        this.status = true;
        this.statusFontColor = '#fff';
        this.statusFontSize = '18px';
        this.temperature = true;
        this.isDegree = true;
        this.isFahrenheit = false;
        this.tempratureFontColor = '#fff';
        this.tempratureFontSize = '80px';
        this.weatherImages = true;
        this.weatherImageWidth = '100px';
        this.weatherImageHeight = '100px';
        this.geoLocation = true;
        this.location = '';
        this.isWind = true;
        this.windFontColor = '#fff';
        this.windFontSize = '20px';
        this.isWindKPH = true;
        this.isWindMPH = false;
    }
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.checkLocation();
    };
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.checkLocation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // if enabled geolocation
        if (this.geoLocation) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((/**
                 * @param {?} position
                 * @return {?}
                 */
                function (position) {
                    /** @type {?} */
                    var lat = position.coords.latitude;
                    /** @type {?} */
                    var long = position.coords.longitude;
                    _this.location = lat + ',' + long;
                    _this.getWeather();
                }));
            }
            else {
                console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');
            }
        }
        else if (!this.geoLocation && this.location.length < 1) {
            console.log('Provide  a valid location');
        }
        else {
            this.getWeather();
        }
    };
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.getWeather = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.APIKEY) {
            this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.weatherDetails = response.current;
                _this.locationDetails = response.location;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.log(err.error.error.message);
            }));
        }
        else {
            console.log('Invalid APIKEY');
        }
    };
    AngularWeatherWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'angular-weather-widget',
                    template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <div class=\"location\">\r\n    <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{locationDetails?.name}}</p>\r\n  </div>\r\n  <div class=\"status\" *ngIf=\"status\">\r\n    <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.condition.text}}</p>\r\n  </div>\r\n  <div class=\"temp\" *ngIf=\"temperature\">\r\n    <p *ngIf=\"isDegree\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_c}}\u00B0c</p>\r\n    <p *ngIf=\"isFahrenheit\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_f}}\u00B0F</p>\r\n    <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n      <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight, 'color': '#fff'}\" alt=\"weather-icon\" src=\"{{weatherDetails?.condition.icon}}\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"details\" *ngIf=\"isWind\">\r\n    <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n    <p class=\"wind\" *ngIf=\"isWindKPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_kph}} KPH</p>\r\n    <p class=\"wind\" *ngIf=\"isWindMPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_mph}} MPH</p>\r\n  </div>\r\n</div>\r\n",
                    styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .details,.container .temp{display:flex}.container .details .wind{padding-left:10px}"]
                }] }
    ];
    /** @nocollapse */
    AngularWeatherWidgetComponent.ctorParameters = function () { return [
        { type: AngularWeatherWidgetService }
    ]; };
    AngularWeatherWidgetComponent.propDecorators = {
        APIKEY: [{ type: Input }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        isBoxShadow: [{ type: Input }],
        borderRadius: [{ type: Input }],
        locationFontSize: [{ type: Input }],
        locationFontColor: [{ type: Input }],
        status: [{ type: Input }],
        statusFontColor: [{ type: Input }],
        statusFontSize: [{ type: Input }],
        temperature: [{ type: Input }],
        isDegree: [{ type: Input }],
        isFahrenheit: [{ type: Input }],
        tempratureFontColor: [{ type: Input }],
        tempratureFontSize: [{ type: Input }],
        weatherImages: [{ type: Input }],
        weatherImageWidth: [{ type: Input }],
        weatherImageHeight: [{ type: Input }],
        geoLocation: [{ type: Input }],
        location: [{ type: Input }],
        isWind: [{ type: Input }],
        windFontColor: [{ type: Input }],
        windFontSize: [{ type: Input }],
        isWindKPH: [{ type: Input }],
        isWindMPH: [{ type: Input }]
    };
    return AngularWeatherWidgetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularWeatherWidgetModule = /** @class */ (function () {
    function AngularWeatherWidgetModule() {
    }
    AngularWeatherWidgetModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AngularWeatherWidgetComponent],
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ],
                    exports: [AngularWeatherWidgetComponent],
                    providers: [AngularWeatherWidgetService]
                },] }
    ];
    return AngularWeatherWidgetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularWeatherWidgetService, AngularWeatherWidgetComponent, AngularWeatherWidgetModule };

//# sourceMappingURL=angular2-weather-widget.js.map