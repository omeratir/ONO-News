/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { API } from './config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var AngularWeatherWidgetService = /** @class */ (function () {
    function AngularWeatherWidgetService(http) {
        this.http = http;
    }
    /**
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    AngularWeatherWidgetService.prototype.getWeatherDetails = /**
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    function (location, APIKEY) {
        return this.http.get(API + APIKEY + '&q=' + location);
    };
    AngularWeatherWidgetService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AngularWeatherWidgetService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = i0.defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(i0.inject(i1.HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
    return AngularWeatherWidgetService;
}());
export { AngularWeatherWidgetService };
if (false) {
    /** @type {?} */
    AngularWeatherWidgetService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci13ZWF0aGVyLXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItd2VhdGhlci13aWRnZXQvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci13ZWF0aGVyLXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7QUFFL0I7SUFLRSxxQ0FBbUIsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7OztJQUV4Qyx1REFBaUI7Ozs7O0lBQWpCLFVBQWtCLFFBQVEsRUFBRSxNQUFNO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBVEYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMUSxVQUFVOzs7c0NBRm5CO0NBZUMsQUFWRCxJQVVDO1NBUFksMkJBQTJCOzs7SUFFMUIsMkNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEFQSSB9IGZyb20gJy4vY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcldlYXRoZXJXaWRnZXRTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgZ2V0V2VhdGhlckRldGFpbHMobG9jYXRpb24sIEFQSUtFWSkgOiBPYnNlcnZhYmxlIDxhbnk+IHtcbiAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KEFQSSArIEFQSUtFWSArICcmcT0nICsgbG9jYXRpb24pO1xuICB9XG59XG4iXX0=