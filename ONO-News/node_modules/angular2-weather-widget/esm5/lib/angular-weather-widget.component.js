/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { AngularWeatherWidgetService } from './angular-weather-widget.service';
var AngularWeatherWidgetComponent = /** @class */ (function () {
    function AngularWeatherWidgetComponent(ws) {
        this.ws = ws;
        this.height = 'auto';
        this.width = '280px';
        this.backgroundColor = '#2a2828';
        this.isBoxShadow = true;
        this.borderRadius = '5px';
        this.locationFontSize = '40px';
        this.locationFontColor = '#fff';
        this.status = true;
        this.statusFontColor = '#fff';
        this.statusFontSize = '18px';
        this.temperature = true;
        this.isDegree = true;
        this.isFahrenheit = false;
        this.tempratureFontColor = '#fff';
        this.tempratureFontSize = '80px';
        this.weatherImages = true;
        this.weatherImageWidth = '100px';
        this.weatherImageHeight = '100px';
        this.geoLocation = true;
        this.location = '';
        this.isWind = true;
        this.windFontColor = '#fff';
        this.windFontSize = '20px';
        this.isWindKPH = true;
        this.isWindMPH = false;
    }
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.checkLocation();
    };
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.checkLocation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // if enabled geolocation
        if (this.geoLocation) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((/**
                 * @param {?} position
                 * @return {?}
                 */
                function (position) {
                    /** @type {?} */
                    var lat = position.coords.latitude;
                    /** @type {?} */
                    var long = position.coords.longitude;
                    _this.location = lat + ',' + long;
                    _this.getWeather();
                }));
            }
            else {
                console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');
            }
        }
        else if (!this.geoLocation && this.location.length < 1) {
            console.log('Provide  a valid location');
        }
        else {
            this.getWeather();
        }
    };
    /**
     * @return {?}
     */
    AngularWeatherWidgetComponent.prototype.getWeather = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.APIKEY) {
            this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.weatherDetails = response.current;
                _this.locationDetails = response.location;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.log(err.error.error.message);
            }));
        }
        else {
            console.log('Invalid APIKEY');
        }
    };
    AngularWeatherWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'angular-weather-widget',
                    template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <div class=\"location\">\r\n    <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{locationDetails?.name}}</p>\r\n  </div>\r\n  <div class=\"status\" *ngIf=\"status\">\r\n    <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.condition.text}}</p>\r\n  </div>\r\n  <div class=\"temp\" *ngIf=\"temperature\">\r\n    <p *ngIf=\"isDegree\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_c}}\u00B0c</p>\r\n    <p *ngIf=\"isFahrenheit\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_f}}\u00B0F</p>\r\n    <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n      <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight, 'color': '#fff'}\" alt=\"weather-icon\" src=\"{{weatherDetails?.condition.icon}}\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"details\" *ngIf=\"isWind\">\r\n    <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n    <p class=\"wind\" *ngIf=\"isWindKPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_kph}} KPH</p>\r\n    <p class=\"wind\" *ngIf=\"isWindMPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_mph}} MPH</p>\r\n  </div>\r\n</div>\r\n",
                    styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .details,.container .temp{display:flex}.container .details .wind{padding-left:10px}"]
                }] }
    ];
    /** @nocollapse */
    AngularWeatherWidgetComponent.ctorParameters = function () { return [
        { type: AngularWeatherWidgetService }
    ]; };
    AngularWeatherWidgetComponent.propDecorators = {
        APIKEY: [{ type: Input }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        isBoxShadow: [{ type: Input }],
        borderRadius: [{ type: Input }],
        locationFontSize: [{ type: Input }],
        locationFontColor: [{ type: Input }],
        status: [{ type: Input }],
        statusFontColor: [{ type: Input }],
        statusFontSize: [{ type: Input }],
        temperature: [{ type: Input }],
        isDegree: [{ type: Input }],
        isFahrenheit: [{ type: Input }],
        tempratureFontColor: [{ type: Input }],
        tempratureFontSize: [{ type: Input }],
        weatherImages: [{ type: Input }],
        weatherImageWidth: [{ type: Input }],
        weatherImageHeight: [{ type: Input }],
        geoLocation: [{ type: Input }],
        location: [{ type: Input }],
        isWind: [{ type: Input }],
        windFontColor: [{ type: Input }],
        windFontSize: [{ type: Input }],
        isWindKPH: [{ type: Input }],
        isWindMPH: [{ type: Input }]
    };
    return AngularWeatherWidgetComponent;
}());
export { AngularWeatherWidgetComponent };
if (false) {
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.APIKEY;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.height;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.width;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.backgroundColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isBoxShadow;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.borderRadius;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.status;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.statusFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.statusFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.temperature;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isDegree;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isFahrenheit;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.tempratureFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.tempratureFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImages;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImageWidth;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImageHeight;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.geoLocation;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.location;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWind;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.windFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.windFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWindKPH;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWindMPH;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherDetails;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationDetails;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.ws;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci13ZWF0aGVyLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi13ZWF0aGVyLXdpZGdldC8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLXdlYXRoZXItd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0U7SUFtQ0UsdUNBQW1CLEVBQStCO1FBQS9CLE9BQUUsR0FBRixFQUFFLENBQTZCO1FBNUJ6QyxXQUFNLEdBQVcsTUFBTSxDQUFDO1FBQ3hCLFVBQUssR0FBVyxPQUFPLENBQUM7UUFDeEIsb0JBQWUsR0FBVyxTQUFTLENBQUM7UUFDcEMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsaUJBQVksR0FBVyxLQUFLLENBQUM7UUFDN0IscUJBQWdCLEdBQVcsTUFBTSxDQUFDO1FBQ2xDLHNCQUFpQixHQUFXLE1BQU0sQ0FBQztRQUNuQyxXQUFNLEdBQVksSUFBSSxDQUFDO1FBQ3ZCLG9CQUFlLEdBQVcsTUFBTSxDQUFDO1FBQ2pDLG1CQUFjLEdBQVcsTUFBTSxDQUFDO1FBQ2hDLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBQzVCLGFBQVEsR0FBWSxJQUFJLENBQUM7UUFDekIsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsd0JBQW1CLEdBQVcsTUFBTSxDQUFDO1FBQ3JDLHVCQUFrQixHQUFXLE1BQU0sQ0FBQztRQUNwQyxrQkFBYSxHQUFZLElBQUksQ0FBQztRQUM5QixzQkFBaUIsR0FBVyxPQUFPLENBQUM7UUFDcEMsdUJBQWtCLEdBQVcsT0FBTyxDQUFDO1FBQ3JDLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBQzVCLGFBQVEsR0FBUSxFQUFFLENBQUM7UUFDbkIsV0FBTSxHQUFZLElBQUksQ0FBQztR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LG9EQUFxQzs7SUFDckMsaURBQWtDOztJQUNsQyxxREFBdUM7O0lBQ3ZDLDREQUE4Qzs7SUFDOUMsMkRBQTZDOztJQUM3QyxzREFBdUM7O0lBQ3ZDLDBEQUE2Qzs7SUFDN0MsMkRBQThDOztJQUM5QyxvREFBcUM7O0lBQ3JDLGlEQUE0Qjs7SUFDNUIsK0NBQWdDOztJQUNoQyxzREFBd0M7O0lBQ3hDLHFEQUF1Qzs7SUFDdkMsa0RBQW1DOztJQUNuQyxrREFBb0M7O0lBRXBDLHVEQUFlOztJQUNmLHdEQUFnQjs7SUFDSiwyQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJXZWF0aGVyV2lkZ2V0U2VydmljZSB9IGZyb20gJy4vYW5ndWxhci13ZWF0aGVyLXdpZGdldC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW5ndWxhci13ZWF0aGVyLXdpZGdldCcsXG4gIHRlbXBsYXRlVXJsOiAnYW5ndWxhci13ZWF0aGVyLXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydhbmd1bGFyLXdlYXRoZXItd2lkZ2V0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhcldlYXRoZXJXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBBUElLRVk6IGFueTtcbiAgQElucHV0KCkgaGVpZ2h0OiBzdHJpbmcgPSAnYXV0byc7XG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgPSAnMjgwcHgnO1xuICBASW5wdXQoKSBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyA9ICcjMmEyODI4JztcbiAgQElucHV0KCkgaXNCb3hTaGFkb3c6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBib3JkZXJSYWRpdXM6IHN0cmluZyA9ICc1cHgnO1xuICBASW5wdXQoKSBsb2NhdGlvbkZvbnRTaXplOiBzdHJpbmcgPSAnNDBweCc7XG4gIEBJbnB1dCgpIGxvY2F0aW9uRm9udENvbG9yOiBzdHJpbmcgPSAnI2ZmZic7XG4gIEBJbnB1dCgpIHN0YXR1czogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHN0YXR1c0ZvbnRDb2xvcjogc3RyaW5nID0gJyNmZmYnO1xuICBASW5wdXQoKSBzdGF0dXNGb250U2l6ZTogU3RyaW5nID0gJzE4cHgnO1xuICBASW5wdXQoKSB0ZW1wZXJhdHVyZTogQm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGlzRGVncmVlOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgaXNGYWhyZW5oZWl0OiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRlbXByYXR1cmVGb250Q29sb3I6IHN0cmluZyA9ICcjZmZmJztcbiAgQElucHV0KCkgdGVtcHJhdHVyZUZvbnRTaXplOiBzdHJpbmcgPSAnODBweCc7XG4gIEBJbnB1dCgpIHdlYXRoZXJJbWFnZXM6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSB3ZWF0aGVySW1hZ2VXaWR0aDogc3RyaW5nID0gJzEwMHB4JztcbiAgQElucHV0KCkgd2VhdGhlckltYWdlSGVpZ2h0OiBzdHJpbmcgPSAnMTAwcHgnO1xuICBASW5wdXQoKSBnZW9Mb2NhdGlvbjogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGxvY2F0aW9uOiBhbnkgPSAnJztcbiAgQElucHV0KCkgaXNXaW5kOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgd2luZEZvbnRDb2xvcjogc3RyaW5nID0gJyNmZmYnO1xuICBASW5wdXQoKSB3aW5kRm9udFNpemU6IHN0cmluZyA9ICcyMHB4JztcbiAgQElucHV0KCkgaXNXaW5kS1BIOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgaXNXaW5kTVBIOiBib29sZWFuID0gZmFsc2U7XG5cbiAgd2VhdGhlckRldGFpbHM7XG4gIGxvY2F0aW9uRGV0YWlscztcbiAgY29uc3RydWN0b3IocHVibGljIHdzOiBBbmd1bGFyV2VhdGhlcldpZGdldFNlcnZpY2UpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tMb2NhdGlvbigpO1xuICB9XG5cbiAgY2hlY2tMb2NhdGlvbigpIHtcbiAgICAvLyBpZiBlbmFibGVkIGdlb2xvY2F0aW9uXG4gICAgaWYgKHRoaXMuZ2VvTG9jYXRpb24pIHtcbiAgICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcbiAgICAgICAgICB2YXIgbGF0ID0gcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlO1xuICAgICAgICAgIHZhciBsb25nID0gcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZTtcbiAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gbGF0ICsgJywnICsgbG9uZztcbiAgICAgICAgICB0aGlzLmdldFdlYXRoZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnSXQgc2VlbXMgbGlrZSBHZW9sb2NhdGlvbiwgd2hpY2ggaXMgcmVxdWlyZWQgZm9yIHRoaXMgcGFnZSwgaXMgbm90IGVuYWJsZWQgaW4geW91ciBicm93c2VyLiBQbGVhc2UgdXNlIGEgYnJvd3NlciB3aGljaCBzdXBwb3J0cyBpdC4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmdlb0xvY2F0aW9uICYmIHRoaXMubG9jYXRpb24ubGVuZ3RoIDwgMSkge1xuICAgICAgY29uc29sZS5sb2coJ1Byb3ZpZGUgIGEgdmFsaWQgbG9jYXRpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRXZWF0aGVyKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0V2VhdGhlcigpIHtcbiAgICBpZiAodGhpcy5BUElLRVkpIHtcbiAgICAgIHRoaXMud3MuZ2V0V2VhdGhlckRldGFpbHModGhpcy5sb2NhdGlvbiwgdGhpcy5BUElLRVkpLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XG4gICAgICAgIHRoaXMud2VhdGhlckRldGFpbHMgPSByZXNwb25zZS5jdXJyZW50O1xuICAgICAgICB0aGlzLmxvY2F0aW9uRGV0YWlscyA9IHJlc3BvbnNlLmxvY2F0aW9uO1xuICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyLmVycm9yLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgQVBJS0VZJyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==