/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { AngularWeatherWidgetService } from './angular-weather-widget.service';
export class AngularWeatherWidgetComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
        this.height = 'auto';
        this.width = '280px';
        this.backgroundColor = '#2a2828';
        this.isBoxShadow = true;
        this.borderRadius = '5px';
        this.locationFontSize = '40px';
        this.locationFontColor = '#fff';
        this.status = true;
        this.statusFontColor = '#fff';
        this.statusFontSize = '18px';
        this.temperature = true;
        this.isDegree = true;
        this.isFahrenheit = false;
        this.tempratureFontColor = '#fff';
        this.tempratureFontSize = '80px';
        this.weatherImages = true;
        this.weatherImageWidth = '100px';
        this.weatherImageHeight = '100px';
        this.geoLocation = true;
        this.location = '';
        this.isWind = true;
        this.windFontColor = '#fff';
        this.windFontSize = '20px';
        this.isWindKPH = true;
        this.isWindMPH = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkLocation();
    }
    /**
     * @return {?}
     */
    checkLocation() {
        // if enabled geolocation
        if (this.geoLocation) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((/**
                 * @param {?} position
                 * @return {?}
                 */
                (position) => {
                    /** @type {?} */
                    var lat = position.coords.latitude;
                    /** @type {?} */
                    var long = position.coords.longitude;
                    this.location = lat + ',' + long;
                    this.getWeather();
                }));
            }
            else {
                console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');
            }
        }
        else if (!this.geoLocation && this.location.length < 1) {
            console.log('Provide  a valid location');
        }
        else {
            this.getWeather();
        }
    }
    /**
     * @return {?}
     */
    getWeather() {
        if (this.APIKEY) {
            this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.weatherDetails = response.current;
                this.locationDetails = response.location;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                console.log(err.error.error.message);
            }));
        }
        else {
            console.log('Invalid APIKEY');
        }
    }
}
AngularWeatherWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-weather-widget',
                template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <div class=\"location\">\r\n    <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{locationDetails?.name}}</p>\r\n  </div>\r\n  <div class=\"status\" *ngIf=\"status\">\r\n    <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.condition.text}}</p>\r\n  </div>\r\n  <div class=\"temp\" *ngIf=\"temperature\">\r\n    <p *ngIf=\"isDegree\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_c}}\u00B0c</p>\r\n    <p *ngIf=\"isFahrenheit\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_f}}\u00B0F</p>\r\n    <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n      <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight, 'color': '#fff'}\" alt=\"weather-icon\" src=\"{{weatherDetails?.condition.icon}}\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"details\" *ngIf=\"isWind\">\r\n    <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n    <p class=\"wind\" *ngIf=\"isWindKPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_kph}} KPH</p>\r\n    <p class=\"wind\" *ngIf=\"isWindMPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_mph}} MPH</p>\r\n  </div>\r\n</div>\r\n",
                styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .details,.container .temp{display:flex}.container .details .wind{padding-left:10px}"]
            }] }
];
/** @nocollapse */
AngularWeatherWidgetComponent.ctorParameters = () => [
    { type: AngularWeatherWidgetService }
];
AngularWeatherWidgetComponent.propDecorators = {
    APIKEY: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    isBoxShadow: [{ type: Input }],
    borderRadius: [{ type: Input }],
    locationFontSize: [{ type: Input }],
    locationFontColor: [{ type: Input }],
    status: [{ type: Input }],
    statusFontColor: [{ type: Input }],
    statusFontSize: [{ type: Input }],
    temperature: [{ type: Input }],
    isDegree: [{ type: Input }],
    isFahrenheit: [{ type: Input }],
    tempratureFontColor: [{ type: Input }],
    tempratureFontSize: [{ type: Input }],
    weatherImages: [{ type: Input }],
    weatherImageWidth: [{ type: Input }],
    weatherImageHeight: [{ type: Input }],
    geoLocation: [{ type: Input }],
    location: [{ type: Input }],
    isWind: [{ type: Input }],
    windFontColor: [{ type: Input }],
    windFontSize: [{ type: Input }],
    isWindKPH: [{ type: Input }],
    isWindMPH: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.APIKEY;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.height;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.width;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.backgroundColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isBoxShadow;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.borderRadius;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.status;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.statusFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.statusFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.temperature;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isDegree;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isFahrenheit;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.tempratureFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.tempratureFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImages;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImageWidth;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherImageHeight;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.geoLocation;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.location;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWind;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.windFontColor;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.windFontSize;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWindKPH;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.isWindMPH;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.weatherDetails;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.locationDetails;
    /** @type {?} */
    AngularWeatherWidgetComponent.prototype.ws;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci13ZWF0aGVyLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi13ZWF0aGVyLXdpZGdldC8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLXdlYXRoZXItd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFPL0UsTUFBTSxPQUFPLDZCQUE2Qjs7OztJQThCeEMsWUFBbUIsRUFBK0I7UUFBL0IsT0FBRSxHQUFGLEVBQUUsQ0FBNkI7UUE1QnpDLFdBQU0sR0FBVyxNQUFNLENBQUM7UUFDeEIsVUFBSyxHQUFXLE9BQU8sQ0FBQztRQUN4QixvQkFBZSxHQUFXLFNBQVMsQ0FBQztRQUNwQyxnQkFBVyxHQUFZLElBQUksQ0FBQztRQUM1QixpQkFBWSxHQUFXLEtBQUssQ0FBQztRQUM3QixxQkFBZ0IsR0FBVyxNQUFNLENBQUM7UUFDbEMsc0JBQWlCLEdBQVcsTUFBTSxDQUFDO1FBQ25DLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFDdkIsb0JBQWUsR0FBVyxNQUFNLENBQUM7UUFDakMsbUJBQWMsR0FBVyxNQUFNLENBQUM7UUFDaEMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsYUFBUSxHQUFZLElBQUksQ0FBQztRQUN6QixpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUM5Qix3QkFBbUIsR0FBVyxNQUFNLENBQUM7UUFDckMsdUJBQWtCLEdBQVcsTUFBTSxDQUFDO1FBQ3BDLGtCQUFhLEdBQVksSUFBSSxDQUFDO1FBQzlCLHNCQUFpQixHQUFXLE9BQU8sQ0FBQztRQUNwQyx1QkFBa0IsR0FBVyxPQUFPLENBQUM7UUFDckMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsYUFBUSxHQUFRLEVBQUUsQ0FBQztRQUNuQixX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QUM5QywyREFBNkM7O0lBQzdDLHNEQUF1Qzs7SUFDdkMsMERBQTZDOztJQUM3QywyREFBOEM7O0lBQzlDLG9EQUFxQzs7SUFDckMsaURBQTRCOztJQUM1QiwrQ0FBZ0M7O0lBQ2hDLHNEQUF3Qzs7SUFDeEMscURBQXVDOztJQUN2QyxrREFBbUM7O0lBQ25DLGtEQUFvQzs7SUFFcEMsdURBQWU7O0lBQ2Ysd0RBQWdCOztJQUNKLDJDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhcldlYXRoZXJXaWRnZXRTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyLXdlYXRoZXItd2lkZ2V0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbmd1bGFyLXdlYXRoZXItd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICdhbmd1bGFyLXdlYXRoZXItd2lkZ2V0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2FuZ3VsYXItd2VhdGhlci13aWRnZXQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFyV2VhdGhlcldpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIEFQSUtFWTogYW55O1xuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZyA9ICdhdXRvJztcbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyA9ICcyODBweCc7XG4gIEBJbnB1dCgpIGJhY2tncm91bmRDb2xvcjogc3RyaW5nID0gJyMyYTI4MjgnO1xuICBASW5wdXQoKSBpc0JveFNoYWRvdzogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGJvcmRlclJhZGl1czogc3RyaW5nID0gJzVweCc7XG4gIEBJbnB1dCgpIGxvY2F0aW9uRm9udFNpemU6IHN0cmluZyA9ICc0MHB4JztcbiAgQElucHV0KCkgbG9jYXRpb25Gb250Q29sb3I6IHN0cmluZyA9ICcjZmZmJztcbiAgQElucHV0KCkgc3RhdHVzOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgc3RhdHVzRm9udENvbG9yOiBzdHJpbmcgPSAnI2ZmZic7XG4gIEBJbnB1dCgpIHN0YXR1c0ZvbnRTaXplOiBTdHJpbmcgPSAnMThweCc7XG4gIEBJbnB1dCgpIHRlbXBlcmF0dXJlOiBCb29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgaXNEZWdyZWU6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBpc0ZhaHJlbmhlaXQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgdGVtcHJhdHVyZUZvbnRDb2xvcjogc3RyaW5nID0gJyNmZmYnO1xuICBASW5wdXQoKSB0ZW1wcmF0dXJlRm9udFNpemU6IHN0cmluZyA9ICc4MHB4JztcbiAgQElucHV0KCkgd2VhdGhlckltYWdlczogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHdlYXRoZXJJbWFnZVdpZHRoOiBzdHJpbmcgPSAnMTAwcHgnO1xuICBASW5wdXQoKSB3ZWF0aGVySW1hZ2VIZWlnaHQ6IHN0cmluZyA9ICcxMDBweCc7XG4gIEBJbnB1dCgpIGdlb0xvY2F0aW9uOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbG9jYXRpb246IGFueSA9ICcnO1xuICBASW5wdXQoKSBpc1dpbmQ6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSB3aW5kRm9udENvbG9yOiBzdHJpbmcgPSAnI2ZmZic7XG4gIEBJbnB1dCgpIHdpbmRGb250U2l6ZTogc3RyaW5nID0gJzIwcHgnO1xuICBASW5wdXQoKSBpc1dpbmRLUEg6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBpc1dpbmRNUEg6IGJvb2xlYW4gPSBmYWxzZTtcblxuICB3ZWF0aGVyRGV0YWlscztcbiAgbG9jYXRpb25EZXRhaWxzO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgd3M6IEFuZ3VsYXJXZWF0aGVyV2lkZ2V0U2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jaGVja0xvY2F0aW9uKCk7XG4gIH1cblxuICBjaGVja0xvY2F0aW9uKCkge1xuICAgIC8vIGlmIGVuYWJsZWQgZ2VvbG9jYXRpb25cbiAgICBpZiAodGhpcy5nZW9Mb2NhdGlvbikge1xuICAgICAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikge1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xuICAgICAgICAgIHZhciBsYXQgPSBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGU7XG4gICAgICAgICAgdmFyIGxvbmcgPSBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlO1xuICAgICAgICAgIHRoaXMubG9jYXRpb24gPSBsYXQgKyAnLCcgKyBsb25nO1xuICAgICAgICAgIHRoaXMuZ2V0V2VhdGhlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJdCBzZWVtcyBsaWtlIEdlb2xvY2F0aW9uLCB3aGljaCBpcyByZXF1aXJlZCBmb3IgdGhpcyBwYWdlLCBpcyBub3QgZW5hYmxlZCBpbiB5b3VyIGJyb3dzZXIuIFBsZWFzZSB1c2UgYSBicm93c2VyIHdoaWNoIHN1cHBvcnRzIGl0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2VvTG9jYXRpb24gJiYgdGhpcy5sb2NhdGlvbi5sZW5ndGggPCAxKSB7XG4gICAgICBjb25zb2xlLmxvZygnUHJvdmlkZSAgYSB2YWxpZCBsb2NhdGlvbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFdlYXRoZXIoKTtcbiAgICB9XG4gIH1cblxuICBnZXRXZWF0aGVyKCkge1xuICAgIGlmICh0aGlzLkFQSUtFWSkge1xuICAgICAgdGhpcy53cy5nZXRXZWF0aGVyRGV0YWlscyh0aGlzLmxvY2F0aW9uLCB0aGlzLkFQSUtFWSkuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgdGhpcy53ZWF0aGVyRGV0YWlscyA9IHJlc3BvbnNlLmN1cnJlbnQ7XG4gICAgICAgIHRoaXMubG9jYXRpb25EZXRhaWxzID0gcmVzcG9uc2UubG9jYXRpb247XG4gICAgICB9LCBlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIuZXJyb3IuZXJyb3IubWVzc2FnZSk7XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBBUElLRVknKTtcbiAgICB9XG4gIH1cblxufVxuIl19