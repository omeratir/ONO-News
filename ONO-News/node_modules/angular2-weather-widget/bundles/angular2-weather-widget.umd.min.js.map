{"version":3,"sources":["ng://angular2-weather-widget/lib/config.ts","ng://angular2-weather-widget/lib/angular-weather-widget.service.ts","ng://angular2-weather-widget/lib/angular-weather-widget.component.ts","ng://angular2-weather-widget/lib/angular-weather-widget.module.ts"],"names":["AngularWeatherWidgetService","prototype","getWeatherDetails","location","APIKEY","this","http","get","Injectable","args","providedIn","HttpClient","AngularWeatherWidgetComponent","ngOnInit","checkLocation","_this","geoLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","getWeather","console","log","length","ws","subscribe","response","weatherDetails","current","locationDetails","err","error","message","Component","selector","template","Input","height","width","backgroundColor","isBoxShadow","borderRadius","locationFontSize","locationFontColor","status","statusFontColor","statusFontSize","temperature","isDegree","isFahrenheit","tempratureFontColor","tempratureFontSize","weatherImages","weatherImageWidth","weatherImageHeight","isWind","windFontColor","windFontSize","isWindKPH","isWindMPH","AngularWeatherWidgetModule","NgModule","declarations","imports","CommonModule","HttpClientModule","exports","providers"],"mappings":"iaAAA,ICAAA,GAYEA,EAAAC,UAAAC,kBAAA,SAAkBC,EAAUC,GAC3B,OAAOC,KAAKC,KAAKC,IDbD,4CCaWH,EAAS,MAAQD,wBAR9CK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLC,EAAAA,4IAQP,SAAAX,EAAmBM,GAAAD,KAAAC,KAAAA,ECVrB,IAAAM,GAwCEA,EAAAX,UAAAY,SAAA,WACER,KAAKS,iBAGPF,EAAAX,UAAAa,cAAA,WAAA,IAAAC,EAAAV,KAEMA,KAAKW,YACHC,UAAUC,YACZD,UAAUC,YAAYC,mBAAkB,SAAEC,OACpCC,EAAMD,EAASE,OAAOC,SACtBC,EAAOJ,EAASE,OAAOG,UAC3BV,EAAKZ,SAAWkB,EAAM,IAAMG,EAC5BT,EAAKW,eAGPC,QAAQC,IAAI,wIAEJvB,KAAKW,aAAeX,KAAKF,SAAS0B,OAAS,EACrDF,QAAQC,IAAI,6BAEZvB,KAAKqB,cAITd,EAAAX,UAAAyB,WAAA,WAAA,IAAAX,EAAAV,KACMA,KAAKD,OACPC,KAAKyB,GAAG5B,kBAAkBG,KAAKF,SAAUE,KAAKD,QAAQ2B,UAAS,SAACC,GAC9DjB,EAAKkB,eAAiBD,EAASE,QAC/BnB,EAAKoB,gBAAkBH,EAAS7B,UACjC,SAAEiC,GACDT,QAAQC,IAAIQ,EAAIC,MAAMA,MAAMC,WAG9BX,QAAQC,IAAI,uCAtEjBW,EAAAA,UAAS9B,KAAA,CAAC,CACT+B,SAAU,yBACVC,SAAA,k0DAJOzC,qCAQN0C,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,gCACAA,EAAAA,iCACAA,EAAAA,sBACAA,EAAAA,+BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,4BACAA,EAAAA,mCACAA,EAAAA,kCACAA,EAAAA,6BACAA,EAAAA,iCACAA,EAAAA,kCACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,SA2CH9B,GAvCE,SAAAA,EAAmBkB,GAAAzB,KAAAyB,GAAAA,EA5BVzB,KAAAsC,OAAiB,OACjBtC,KAAAuC,MAAgB,QAChBvC,KAAAwC,gBAA0B,UAC1BxC,KAAAyC,aAAuB,EACvBzC,KAAA0C,aAAuB,MACvB1C,KAAA2C,iBAA2B,OAC3B3C,KAAA4C,kBAA4B,OAC5B5C,KAAA6C,QAAkB,EAClB7C,KAAA8C,gBAA0B,OAC1B9C,KAAA+C,eAAyB,OACzB/C,KAAAgD,aAAuB,EACvBhD,KAAAiD,UAAoB,EACpBjD,KAAAkD,cAAwB,EACxBlD,KAAAmD,oBAA8B,OAC9BnD,KAAAoD,mBAA6B,OAC7BpD,KAAAqD,eAAyB,EACzBrD,KAAAsD,kBAA4B,QAC5BtD,KAAAuD,mBAA6B,QAC7BvD,KAAAW,aAAuB,EACvBX,KAAAF,SAAgB,GAChBE,KAAAwD,QAAkB,EAClBxD,KAAAyD,cAAwB,OACxBzD,KAAA0D,aAAuB,OACvB1D,KAAA2D,WAAqB,EACrB3D,KAAA4D,WAAqB,EClChC,IAAAC,uBAMCC,EAAAA,SAAQ1D,KAAA,CAAC,CACR2D,aAAc,CAACxD,GACfyD,QAAS,CACPC,EAAAA,aACAC,EAAAA,kBAEFC,QAAS,CAAC5D,GACV6D,UAAW,CAACzE,OAE4BkE,GAT1C,SAAAA","sourcesContent":["export const API = 'http://api.apixu.com/v1/current.json?key=';","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularWeatherWidgetService {\n\n  constructor(public http: HttpClient) { }\n\n  getWeatherDetails(location, APIKEY) : Observable <any> {\n   return this.http.get(API + APIKEY + '&q=' + location);\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\n\n@Component({\n  selector: 'angular-weather-widget',\n  templateUrl: 'angular-weather-widget.component.html',\n  styleUrls: ['angular-weather-widget.component.scss']\n})\nexport class AngularWeatherWidgetComponent implements OnInit {\n  @Input() APIKEY: any;\n  @Input() height: string = 'auto';\n  @Input() width: string = '280px';\n  @Input() backgroundColor: string = '#2a2828';\n  @Input() isBoxShadow: boolean = true;\n  @Input() borderRadius: string = '5px';\n  @Input() locationFontSize: string = '40px';\n  @Input() locationFontColor: string = '#fff';\n  @Input() status: boolean = true;\n  @Input() statusFontColor: string = '#fff';\n  @Input() statusFontSize: String = '18px';\n  @Input() temperature: Boolean = true;\n  @Input() isDegree: boolean = true;\n  @Input() isFahrenheit: boolean = false;\n  @Input() tempratureFontColor: string = '#fff';\n  @Input() tempratureFontSize: string = '80px';\n  @Input() weatherImages: boolean = true;\n  @Input() weatherImageWidth: string = '100px';\n  @Input() weatherImageHeight: string = '100px';\n  @Input() geoLocation: boolean = true;\n  @Input() location: any = '';\n  @Input() isWind: boolean = true;\n  @Input() windFontColor: string = '#fff';\n  @Input() windFontSize: string = '20px';\n  @Input() isWindKPH: boolean = true;\n  @Input() isWindMPH: boolean = false;\n\n  weatherDetails;\n  locationDetails;\n  constructor(public ws: AngularWeatherWidgetService) { }\n\n  ngOnInit() {\n    this.checkLocation();\n  }\n\n  checkLocation() {\n    // if enabled geolocation\n    if (this.geoLocation) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          var lat = position.coords.latitude;\n          var long = position.coords.longitude;\n          this.location = lat + ',' + long;\n          this.getWeather();\n        });\n      } else {\n        console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');\n      }\n    } else if (!this.geoLocation && this.location.length < 1) {\n      console.log('Provide  a valid location');\n    } else {\n      this.getWeather();\n    }\n  }\n\n  getWeather() {\n    if (this.APIKEY) {\n      this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe(response => {\n        this.weatherDetails = response.current;\n        this.locationDetails = response.location;\n      }, err => {\n        console.log(err.error.error.message);\n      })\n    } else {\n      console.log('Invalid APIKEY');\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularWeatherWidgetComponent } from './angular-weather-widget.component';\nimport { CommonModule } from '@angular/common';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AngularWeatherWidgetComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [AngularWeatherWidgetComponent],\n  providers: [AngularWeatherWidgetService]\n})\nexport class AngularWeatherWidgetModule { }\n"]}