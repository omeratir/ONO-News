(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('angular2-weather-widget', ['exports', '@angular/core', '@angular/common', '@angular/common/http'], factory) :
    (factory((global['angular2-weather-widget'] = {}),global.ng.core,global.ng.common,global.ng.common.http));
}(this, (function (exports,i0,common,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var API = 'http://api.apixu.com/v1/current.json?key=';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetService = /** @class */ (function () {
        function AngularWeatherWidgetService(http) {
            this.http = http;
        }
        /**
         * @param {?} location
         * @param {?} APIKEY
         * @return {?}
         */
        AngularWeatherWidgetService.prototype.getWeatherDetails = /**
         * @param {?} location
         * @param {?} APIKEY
         * @return {?}
         */
            function (location, APIKEY) {
                return this.http.get(API + APIKEY + '&q=' + location);
            };
        AngularWeatherWidgetService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AngularWeatherWidgetService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = i0.defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(i0.inject(i1.HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
        return AngularWeatherWidgetService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetComponent = /** @class */ (function () {
        function AngularWeatherWidgetComponent(ws) {
            this.ws = ws;
            this.height = 'auto';
            this.width = '280px';
            this.backgroundColor = '#2a2828';
            this.isBoxShadow = true;
            this.borderRadius = '5px';
            this.locationFontSize = '40px';
            this.locationFontColor = '#fff';
            this.status = true;
            this.statusFontColor = '#fff';
            this.statusFontSize = '18px';
            this.temperature = true;
            this.isDegree = true;
            this.isFahrenheit = false;
            this.tempratureFontColor = '#fff';
            this.tempratureFontSize = '80px';
            this.weatherImages = true;
            this.weatherImageWidth = '100px';
            this.weatherImageHeight = '100px';
            this.geoLocation = true;
            this.location = '';
            this.isWind = true;
            this.windFontColor = '#fff';
            this.windFontSize = '20px';
            this.isWindKPH = true;
            this.isWindMPH = false;
        }
        /**
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.checkLocation();
            };
        /**
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.checkLocation = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // if enabled geolocation
                if (this.geoLocation) {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(( /**
                         * @param {?} position
                         * @return {?}
                         */function (position) {
                            /** @type {?} */
                            var lat = position.coords.latitude;
                            /** @type {?} */
                            var long = position.coords.longitude;
                            _this.location = lat + ',' + long;
                            _this.getWeather();
                        }));
                    }
                    else {
                        console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');
                    }
                }
                else if (!this.geoLocation && this.location.length < 1) {
                    console.log('Provide  a valid location');
                }
                else {
                    this.getWeather();
                }
            };
        /**
         * @return {?}
         */
        AngularWeatherWidgetComponent.prototype.getWeather = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.APIKEY) {
                    this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe(( /**
                     * @param {?} response
                     * @return {?}
                     */function (response) {
                        _this.weatherDetails = response.current;
                        _this.locationDetails = response.location;
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        console.log(err.error.error.message);
                    }));
                }
                else {
                    console.log('Invalid APIKEY');
                }
            };
        AngularWeatherWidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'angular-weather-widget',
                        template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <div class=\"location\">\r\n    <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{locationDetails?.name}}</p>\r\n  </div>\r\n  <div class=\"status\" *ngIf=\"status\">\r\n    <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.condition.text}}</p>\r\n  </div>\r\n  <div class=\"temp\" *ngIf=\"temperature\">\r\n    <p *ngIf=\"isDegree\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_c}}\u00B0c</p>\r\n    <p *ngIf=\"isFahrenheit\" [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temp_f}}\u00B0F</p>\r\n    <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n      <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight, 'color': '#fff'}\" alt=\"weather-icon\" src=\"{{weatherDetails?.condition.icon}}\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"details\" *ngIf=\"isWind\">\r\n    <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n    <p class=\"wind\" *ngIf=\"isWindKPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_kph}} KPH</p>\r\n    <p class=\"wind\" *ngIf=\"isWindMPH\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_mph}} MPH</p>\r\n  </div>\r\n</div>\r\n",
                        styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .details,.container .temp{display:flex}.container .details .wind{padding-left:10px}"]
                    }] }
        ];
        /** @nocollapse */
        AngularWeatherWidgetComponent.ctorParameters = function () {
            return [
                { type: AngularWeatherWidgetService }
            ];
        };
        AngularWeatherWidgetComponent.propDecorators = {
            APIKEY: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            backgroundColor: [{ type: i0.Input }],
            isBoxShadow: [{ type: i0.Input }],
            borderRadius: [{ type: i0.Input }],
            locationFontSize: [{ type: i0.Input }],
            locationFontColor: [{ type: i0.Input }],
            status: [{ type: i0.Input }],
            statusFontColor: [{ type: i0.Input }],
            statusFontSize: [{ type: i0.Input }],
            temperature: [{ type: i0.Input }],
            isDegree: [{ type: i0.Input }],
            isFahrenheit: [{ type: i0.Input }],
            tempratureFontColor: [{ type: i0.Input }],
            tempratureFontSize: [{ type: i0.Input }],
            weatherImages: [{ type: i0.Input }],
            weatherImageWidth: [{ type: i0.Input }],
            weatherImageHeight: [{ type: i0.Input }],
            geoLocation: [{ type: i0.Input }],
            location: [{ type: i0.Input }],
            isWind: [{ type: i0.Input }],
            windFontColor: [{ type: i0.Input }],
            windFontSize: [{ type: i0.Input }],
            isWindKPH: [{ type: i0.Input }],
            isWindMPH: [{ type: i0.Input }]
        };
        return AngularWeatherWidgetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularWeatherWidgetModule = /** @class */ (function () {
        function AngularWeatherWidgetModule() {
        }
        AngularWeatherWidgetModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [AngularWeatherWidgetComponent],
                        imports: [
                            common.CommonModule,
                            i1.HttpClientModule
                        ],
                        exports: [AngularWeatherWidgetComponent],
                        providers: [AngularWeatherWidgetService]
                    },] }
        ];
        return AngularWeatherWidgetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AngularWeatherWidgetService = AngularWeatherWidgetService;
    exports.AngularWeatherWidgetComponent = AngularWeatherWidgetComponent;
    exports.AngularWeatherWidgetModule = AngularWeatherWidgetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular2-weather-widget.umd.js.map