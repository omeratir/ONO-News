{"version":3,"file":"angular2-weather-widget.umd.js.map","sources":["ng://angular2-weather-widget/lib/config.ts","ng://angular2-weather-widget/lib/angular-weather-widget.service.ts","ng://angular2-weather-widget/lib/angular-weather-widget.component.ts","ng://angular2-weather-widget/lib/angular-weather-widget.module.ts"],"sourcesContent":["export const API = 'http://api.apixu.com/v1/current.json?key=';","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularWeatherWidgetService {\n\n  constructor(public http: HttpClient) { }\n\n  getWeatherDetails(location, APIKEY) : Observable <any> {\n   return this.http.get(API + APIKEY + '&q=' + location);\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\n\n@Component({\n  selector: 'angular-weather-widget',\n  templateUrl: 'angular-weather-widget.component.html',\n  styleUrls: ['angular-weather-widget.component.scss']\n})\nexport class AngularWeatherWidgetComponent implements OnInit {\n  @Input() APIKEY: any;\n  @Input() height: string = 'auto';\n  @Input() width: string = '280px';\n  @Input() backgroundColor: string = '#2a2828';\n  @Input() isBoxShadow: boolean = true;\n  @Input() borderRadius: string = '5px';\n  @Input() locationFontSize: string = '40px';\n  @Input() locationFontColor: string = '#fff';\n  @Input() status: boolean = true;\n  @Input() statusFontColor: string = '#fff';\n  @Input() statusFontSize: String = '18px';\n  @Input() temperature: Boolean = true;\n  @Input() isDegree: boolean = true;\n  @Input() isFahrenheit: boolean = false;\n  @Input() tempratureFontColor: string = '#fff';\n  @Input() tempratureFontSize: string = '80px';\n  @Input() weatherImages: boolean = true;\n  @Input() weatherImageWidth: string = '100px';\n  @Input() weatherImageHeight: string = '100px';\n  @Input() geoLocation: boolean = true;\n  @Input() location: any = '';\n  @Input() isWind: boolean = true;\n  @Input() windFontColor: string = '#fff';\n  @Input() windFontSize: string = '20px';\n  @Input() isWindKPH: boolean = true;\n  @Input() isWindMPH: boolean = false;\n\n  weatherDetails;\n  locationDetails;\n  constructor(public ws: AngularWeatherWidgetService) { }\n\n  ngOnInit() {\n    this.checkLocation();\n  }\n\n  checkLocation() {\n    // if enabled geolocation\n    if (this.geoLocation) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          var lat = position.coords.latitude;\n          var long = position.coords.longitude;\n          this.location = lat + ',' + long;\n          this.getWeather();\n        });\n      } else {\n        console.log('It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it.');\n      }\n    } else if (!this.geoLocation && this.location.length < 1) {\n      console.log('Provide  a valid location');\n    } else {\n      this.getWeather();\n    }\n  }\n\n  getWeather() {\n    if (this.APIKEY) {\n      this.ws.getWeatherDetails(this.location, this.APIKEY).subscribe(response => {\n        this.weatherDetails = response.current;\n        this.locationDetails = response.location;\n      }, err => {\n        console.log(err.error.error.message);\n      })\n    } else {\n      console.log('Invalid APIKEY');\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularWeatherWidgetComponent } from './angular-weather-widget.component';\nimport { CommonModule } from '@angular/common';\nimport { AngularWeatherWidgetService } from './angular-weather-widget.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AngularWeatherWidgetComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [AngularWeatherWidgetComponent],\n  providers: [AngularWeatherWidgetService]\n})\nexport class AngularWeatherWidgetModule { }\n"],"names":["Injectable","HttpClient","Component","Input","NgModule","CommonModule","HttpClientModule"],"mappings":"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"}
