!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/common/http")):"function"==typeof define&&define.amd?define("angular2-weather-widget",["exports","@angular/core","@angular/common","@angular/common/http"],e):e(t["angular2-weather-widget"]={},t.ng.core,t.ng.common,t.ng.common.http)}(this,function(t,e,o,n){"use strict";var i=(r.prototype.getWeatherDetails=function(t,e){return this.http.get("http://api.apixu.com/v1/current.json?key="+e+"&q="+t)},r.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],r.ctorParameters=function(){return[{type:n.HttpClient}]},r.ngInjectableDef=e.defineInjectable({factory:function(){return new r(e.inject(n.HttpClient))},token:r,providedIn:"root"}),r);function r(t){this.http=t}var a=(s.prototype.ngOnInit=function(){this.checkLocation()},s.prototype.checkLocation=function(){var n=this;this.geoLocation?navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){var e=t.coords.latitude,o=t.coords.longitude;n.location=e+","+o,n.getWeather()}):console.log("It seems like Geolocation, which is required for this page, is not enabled in your browser. Please use a browser which supports it."):!this.geoLocation&&this.location.length<1?console.log("Provide  a valid location"):this.getWeather()},s.prototype.getWeather=function(){var e=this;this.APIKEY?this.ws.getWeatherDetails(this.location,this.APIKEY).subscribe(function(t){e.weatherDetails=t.current,e.locationDetails=t.location},function(t){console.log(t.error.error.message)}):console.log("Invalid APIKEY")},s.decorators=[{type:e.Component,args:[{selector:"angular-weather-widget",template:'<div class="container"\r\n  [ngStyle]="{ \'width\': width , \'height\': height, \'background-color\': backgroundColor, \'box-shadow\': isBoxShadow ? \'0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\' : \'none\', \'border-radius\': borderRadius }">\r\n  <div class="location">\r\n    <p [ngStyle]="{\'font-size\': locationFontSize, \'color\': locationFontColor}">{{locationDetails?.name}}</p>\r\n  </div>\r\n  <div class="status" *ngIf="status">\r\n    <p [ngStyle]="{\'color\': statusFontColor, \'font-size\': statusFontSize}">{{weatherDetails?.condition.text}}</p>\r\n  </div>\r\n  <div class="temp" *ngIf="temperature">\r\n    <p *ngIf="isDegree" [ngStyle]="{\'color\': tempratureFontColor, \'font-size\': tempratureFontSize}">{{weatherDetails?.temp_c}}°c</p>\r\n    <p *ngIf="isFahrenheit" [ngStyle]="{\'color\': tempratureFontColor, \'font-size\': tempratureFontSize}">{{weatherDetails?.temp_f}}°F</p>\r\n    <div class="weather-images" *ngIf="weatherImages">\r\n      <img [ngStyle]="{\'width\': weatherImageWidth, \'height\': weatherImageHeight, \'color\': \'#fff\'}" alt="weather-icon" src="{{weatherDetails?.condition.icon}}" />\r\n    </div>\r\n  </div>\r\n  <div class="details" *ngIf="isWind">\r\n    <p [ngStyle]="{\'color\': windFontColor, \'font-size\': windFontSize}">Wind</p>\r\n    <p class="wind" *ngIf="isWindKPH" [ngStyle]="{\'color\': windFontColor, \'font-size\': windFontSize}">{{weatherDetails?.wind_kph}} KPH</p>\r\n    <p class="wind" *ngIf="isWindMPH" [ngStyle]="{\'color\': windFontColor, \'font-size\': windFontSize}">{{weatherDetails?.wind_mph}} MPH</p>\r\n  </div>\r\n</div>\r\n',styles:["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .details,.container .temp{display:flex}.container .details .wind{padding-left:10px}"]}]}],s.ctorParameters=function(){return[{type:i}]},s.propDecorators={APIKEY:[{type:e.Input}],height:[{type:e.Input}],width:[{type:e.Input}],backgroundColor:[{type:e.Input}],isBoxShadow:[{type:e.Input}],borderRadius:[{type:e.Input}],locationFontSize:[{type:e.Input}],locationFontColor:[{type:e.Input}],status:[{type:e.Input}],statusFontColor:[{type:e.Input}],statusFontSize:[{type:e.Input}],temperature:[{type:e.Input}],isDegree:[{type:e.Input}],isFahrenheit:[{type:e.Input}],tempratureFontColor:[{type:e.Input}],tempratureFontSize:[{type:e.Input}],weatherImages:[{type:e.Input}],weatherImageWidth:[{type:e.Input}],weatherImageHeight:[{type:e.Input}],geoLocation:[{type:e.Input}],location:[{type:e.Input}],isWind:[{type:e.Input}],windFontColor:[{type:e.Input}],windFontSize:[{type:e.Input}],isWindKPH:[{type:e.Input}],isWindMPH:[{type:e.Input}]},s);function s(t){this.ws=t,this.height="auto",this.width="280px",this.backgroundColor="#2a2828",this.isBoxShadow=!0,this.borderRadius="5px",this.locationFontSize="40px",this.locationFontColor="#fff",this.status=!0,this.statusFontColor="#fff",this.statusFontSize="18px",this.temperature=!0,this.isDegree=!0,this.isFahrenheit=!1,this.tempratureFontColor="#fff",this.tempratureFontSize="80px",this.weatherImages=!0,this.weatherImageWidth="100px",this.weatherImageHeight="100px",this.geoLocation=!0,this.location="",this.isWind=!0,this.windFontColor="#fff",this.windFontSize="20px",this.isWindKPH=!0,this.isWindMPH=!1}var p=(l.decorators=[{type:e.NgModule,args:[{declarations:[a],imports:[o.CommonModule,n.HttpClientModule],exports:[a],providers:[i]}]}],l);function l(){}t.AngularWeatherWidgetService=i,t.AngularWeatherWidgetComponent=a,t.AngularWeatherWidgetModule=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=angular2-weather-widget.umd.min.js.map